#pragma once
#include <DirectXMath.h>

///<summary>Camera object for generating matrix transforms</summary>
class Camera {
public:
  ///<summary>Generate camera with default parameters</summary>
  ///<remarks>
  ///Eye position: (0, 0, 0)
  ///Look-at target position: (0, 0, 1)
  ///FoVY: PI/4
  ///Aspect Ratio: 4/3
  ///Depth limits: near = 1; far = 1000
  ///</remarks>
  Camera();

  ///<summary>Get the position of the camera in world space</summary>
  DirectX::XMFLOAT3 getEyePos() const { return eyePos; }

  ///<summary>Get the position of the look-at target or the direction of looking, depending on which was last set</summary>
  DirectX::XMFLOAT3 getLookTarget() const { return lookTarget; }

  ///<summary>Get the view matrix generated by the current settings</summary>
  DirectX::XMFLOAT4X4 getView() const;
  
  ///<summary>Get the projection matrix generated by the current settings</summary>
  DirectX::XMFLOAT4X4 getProj() const;

  ///<summary>Get the (view * projection) matrix generated by the current settings</summary>
  DirectX::XMFLOAT4X4 getViewProj() const;

  ///<summary>Get the transposition of (world * view * projection) matrix generated by the current settings and the input transform</summary>
  ///<remarks>The transposition is required for uploading via constant buffer, as the GPU wants matrices in column-major order</remarks>
  ///<param name="world">The world transform matrix to use</param>
  DirectX::XMFLOAT4X4 getTransposedWVP(const DirectX::XMFLOAT4X4& world);

  ///<summary>Get the transposition of (world * view * projection) matrix generated by the current settings and the input transform</summary>
  ///<remarks>The transposition is required for uploading via constant buffer, as the GPU wants matrices in column-major order</remarks>
  ///<param name="world">The world transform matrix to use</param>
  DirectX::XMFLOAT4X4 getTransposedWVP(const DirectX::XMMATRIX& world);

  ///<summary>Returns a normalized vector in world space pointing toward the camera's right</summary>
  DirectX::XMFLOAT3 getRightwardDirection();

  ///<summary>Returns a normalized vector in world space pointing in the camera's forward direction</summary>
  DirectX::XMFLOAT3 getForwardDirection();

  ///<summary>Returns a normalized vector in world space pointing in the camera's forward direction but ignoring pitch</summary>
  DirectX::XMFLOAT3 getFlatForward();

  ///<summary>Returns a normalized vector in world space pointing in the camera's back direction but ignoring pitch</summary>
  ///<remarks>This is useful for the weird sprite program I'm using.</remarks>
  DirectX::XMFLOAT3 getFlatBackward();

  struct Arm {
    float length;
    float elevationRadians;
    float orbitRadians;
    DirectX::XMFLOAT3 targetPos;
  };

  ///<summary>Set the position of the camera and the target in world space based on a camera arm object</summary>
  void setEyePos(Arm arm);

  ///<summary>Set the position of the camera in world space</summary>
  void setEyePos(DirectX::XMFLOAT4 pos);

  ///<summary>Set the position of the camera in world space</summary>
  void setEyePos(DirectX::XMFLOAT3 pos);

  ///<summary>Set the position of the camera in world space</summary>
  void setEyePos(float x, float y, float z);

  ///<summary>Switch to look-at mode and set the position (in world space) to look at</summary>
  void setTargetPos(DirectX::XMFLOAT3 pos);

  ///<summary>Switch to look-at mode and set the position (in world space) to look at</summary>
  void setTargetPos(float x, float y, float z);

  ///<summary>Switch to look-toward mode and set the direction (in world space) to look toward</summary>
  void setTargetDir(DirectX::XMFLOAT3 direction);

  ///<summary>Switch to look-toward mode and set the direction (in world space) to look toward</summary>
  void setTargetDir(float x, float y, float z);

  ///<summary>Set the horizontal field of view</summary>
  ///<param name="fov">Horizontal view angle in radians</param>
  void setFovY(float fov);

  ///<summary>Set the aspect ratio</summary>
  ///<param name="ratio">(Width / Height)</param>
  void setAspectRatio(float ratio);

  ///<summary>Set the aspect ratio</summary>
  void setAspectRatio(float width, float height);

  ///<summary>Set the near and far limits of the view frustum</summary>
  void setDepthLimits(float zNear, float zFar);
  
private:
  DirectX::XMFLOAT3 eyePos;
  enum LookMode { AT, TOWARD } lookMode;
  DirectX::XMFLOAT3 lookTarget;
  mutable bool dirtyView;

  float fovY;
  float aspectRatio;
  float nearZ, farZ;
  mutable bool dirtyProj;

  mutable DirectX::XMFLOAT4X4 view;
  mutable DirectX::XMFLOAT4X4 proj;

};
